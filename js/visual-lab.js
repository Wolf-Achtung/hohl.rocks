/* visual-lab.js — file hooks & server calls; ZIP & WebM export */
(function(){
  const input = document.createElement('input'); input.type='file'; input.accept='image/*'; input.style.display='none'; document.body.appendChild(input);
  function toB64(file){ return new Promise(r=>{ const fr=new FileReader(); fr.onload=()=>r(fr.result); fr.readAsDataURL(file); }); }
  async function call(path, body){ const res=await fetch(path,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}); if(!res.ok) throw new Error(await res.text()); return res.json(); }
  function popup(html, footer=''){ openAnswerPopup(html, true, footer); }
  async function ensureJSZip(){ if(window.JSZip) return; await new Promise((resolve,reject)=>{ const s=document.createElement('script'); s.src='https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js'; s.onload=resolve; s.onerror=reject; document.head.appendChild(s); }); }
  async function downloadZIP(imgs){ await ensureJSZip(); const zip=new JSZip(); let i=1; for(const u of imgs){ const b=await fetch(u).then(r=>r.arrayBuffer()); zip.file(`image-${i++}.png`, b); } const blob=await zip.generateAsync({type:'blob'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='images.zip'; a.click(); }
  async function downloadWebM(frames, fps=1){ const c=document.createElement('canvas'); c.width=1024; c.height=576; const ctx=c.getContext('2d'); const stream=c.captureStream(fps); const rec=new MediaRecorder(stream,{mimeType:'video/webm'}); const chunks=[]; rec.ondataavailable=e=>chunks.push(e.data); rec.onstop=()=>{ const blob=new Blob(chunks,{type:'video/webm'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='storyboard.webm'; a.click(); }; rec.start();
    let i=0; function draw(){ const txt=frames[i]; ctx.fillStyle='#0a1118'; ctx.fillRect(0,0,1024,576); ctx.fillStyle='#eaf2ff'; ctx.font='24px ui-sans-serif'; wrap(ctx, txt, 40, 60, 980, 32); i++; if(i<frames.length){ setTimeout(draw, 1000/fps); } else { setTimeout(()=>rec.stop(), 400); } }
    function wrap(ctx, text, x, y, max, lh){ const words=text.split(' '); let line=''; for(let n=0;n<words.length;n++){ const test=line+words[n]+' '; const w=ctx.measureText(test).width; if(w>max && n>0){ ctx.fillText(line,x,y); line=words[n]+' '; y+=lh; } else line=test; } ctx.fillText(line,x,y); }
    draw();
  }
  async function faceAge(){ input.onchange=async e=>{ const f=e.target.files[0]; if(!f) return; const b64=await toB64(f); const out=await call('/image/face-age',{imageBase64:b64,years:20}); popup(`<div style="display:grid;gap:10px;justify-items:center"><img src="${out.imageUrl}" style="max-width:92%;border-radius:12px;box-shadow:0 8px 28px rgba(0,0,0,.35)"><div><button id='dl1'>PNG</button></div></div>`); document.getElementById('dl1').onclick=()=>{ const a=document.createElement('a'); a.href=out.imageUrl; a.download='face-age.png'; a.click(); }; }; input.click(); }
  async function variations(){ input.onchange=async e=>{ const f=e.target.files[0]; if(!f) return; const b64=await toB64(f); const out=await call('/image/variations',{imageBase64:b64}); const imgs=(out.images||[]); const grid=imgs.map(u=>`<img src="${u}" style="width:100%;border-radius:10px;box-shadow:0 6px 20px rgba(0,0,0,.32)">`).join(''); popup(`<div style="display:grid;gap:10px;grid-template-columns:repeat(2,1fr);">${grid}</div>`,`<button id='zip'>Alle als ZIP</button>`); document.getElementById('zip').onclick=()=>downloadZIP(imgs); }; input.click(); }
  async function storyboard(){ const topic=prompt('Storyboard‑Thema?'); if(!topic) return; const out=await call('/video/storyboard',{topic,shots:6}); const frames=(out.frames||[]); const list=frames.map(s=>`<li>${s}</li>`).join(''); popup(`<ol style="padding-left:18px">${list}</ol>`,`<button id='webm'>als WebM exportieren</button>`); document.getElementById('webm').onclick=()=>downloadWebM(frames, 1); }
  window.VisualLab={ handle:(act)=>{ if(act==='face-age') faceAge(); else if(act==='variations') variations(); else if(act==='storyboard') storyboard(); } };
})();